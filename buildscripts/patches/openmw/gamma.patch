diff --git a/apps/openmw/mwrender/renderingmanager.cpp b/apps/openmw/mwrender/renderingmanager.cpp
index 5a88afd78..27c8849a1 100644
--- a/apps/openmw/mwrender/renderingmanager.cpp
+++ b/apps/openmw/mwrender/renderingmanager.cpp
@@ -82,6 +82,32 @@
 #include "groundcover.hpp"
 #include "postprocessor.hpp"

+namespace {
+    class GammaCorrection : public osg::StateAttribute
+    {
+        public :
+            GammaCorrection() : gamma(0) {}
+            GammaCorrection(float gamma_) : gamma(gamma_) {}
+            GammaCorrection(const GammaCorrection& copy,const osg::CopyOp& copyop=osg::CopyOp::SHALLOW_COPY)
+                : osg::StateAttribute(copy,copyop), gamma(copy.gamma) {}
+
+            META_StateAttribute(, GammaCorrection, (osg::StateAttribute::Type)123)
+
+            /** Return -1 if *this < *rhs, 0 if *this==*rhs, 1 if *this>*rhs. */
+            virtual int compare(const StateAttribute& sa) const
+            {
+                throw std::runtime_error("");
+            }
+
+            virtual void apply(osg::State& state) const {
+                glLightModelfv(0x4242,&gamma);
+            }
+
+        private:
+            float gamma;
+    };
+}
+
 namespace MWRender
 {
     class PerViewUniformStateUpdater final : public SceneUtil::StateSetUpdater
@@ -278,7 +304,20 @@ namespace MWRender
                 stateset->setAttributeAndModes(polygonmode, osg::StateAttribute::ON);
             }
             else
+            {
                 stateset->removeAttribute(osg::StateAttribute::POLYGONMODE);
+
+                static bool init = false;
+                static float gamma = 0;
+                if (!init) {
+                    const char *s = getenv("OPENMW_GAMMA");
+                    if (s)
+                        gamma = atof(s);
+                    init = true;
+                }
+                osg::ref_ptr<GammaCorrection> gammaAttribute = new GammaCorrection(gamma);
+                stateset->setAttribute(gammaAttribute);
+            }
         }

         void apply(osg::StateSet* stateset, osg::NodeVisitor*) override
@@ -445,6 +484,10 @@ namespace MWRender

         for (auto itr = shadowDefines.begin(); itr != shadowDefines.end(); itr++)
             globalDefines[itr->first] = itr->second;
+
+               const char *s = getenv("OPENMW_GAMMA");
+               if (s) globalDefines["gamma"] = s;
+                   else globalDefines["gamma"] = "1.0";

         globalDefines["forcePPL"] = Settings::Manager::getBool("force per pixel lighting", "Shaders") ? "1" : "0";
         globalDefines["clamp"] = Settings::Manager::getBool("clamp lighting", "Shaders") ? "1" : "0";
@@ -558,6 +601,9 @@ namespace MWRender
         mCamera = std::make_unique<Camera>(mViewer->getCamera());

         mScreenshotManager = std::make_unique<ScreenshotManager>(viewer, mRootNode, sceneRoot, mResourceSystem, mWater.get());
+
+               osg::ref_ptr<GammaCorrection> gamma = new GammaCorrection(1.0);
+               mViewer->getCamera()->getOrCreateStateSet()->setAttribute(gamma);

         mViewer->setLightingMode(osgViewer::View::NO_LIGHT);

diff --git a/files/shaders/groundcover_fragment.glsl b/files/shaders/groundcover_fragment.glsl
index 0bdc3d915..028e34cdb 100644
--- a/files/shaders/groundcover_fragment.glsl
+++ b/files/shaders/groundcover_fragment.glsl
@@ -91,4 +91,6 @@ void main()
 #endif

     applyShadowDebugOverlay();
+
+       gl_FragData[0].xyz = pow(gl_FragData[0].xyz, vec3(1.0/@gamma));
 }
diff --git a/files/shaders/nv_default_fragment.glsl b/files/shaders/nv_default_fragment.glsl
index 57ef7b14d..46a2deea0 100644
--- a/files/shaders/nv_default_fragment.glsl
+++ b/files/shaders/nv_default_fragment.glsl
@@ -107,4 +107,6 @@ void main()
 #endif

     applyShadowDebugOverlay();
+
+       gl_FragData[0].xyz = pow(gl_FragData[0].xyz, vec3(1.0/@gamma));
 }
diff --git a/files/shaders/nv_nolighting_fragment.glsl b/files/shaders/nv_nolighting_fragment.glsl
index 59dfda9ee..3cd108f65 100644
--- a/files/shaders/nv_nolighting_fragment.glsl
+++ b/files/shaders/nv_nolighting_fragment.glsl
@@ -43,4 +43,6 @@ void main()
 #endif

     gl_FragData[0] = applyFogAtDist(gl_FragData[0], euclideanDepth, linearDepth);
+
+       gl_FragData[0].xyz = pow(gl_FragData[0].xyz, vec3(1.0/@gamma));
 }
diff --git a/files/shaders/objects_fragment.glsl b/files/shaders/objects_fragment.glsl
index caf8b672c..12ec7d2cc 100644
--- a/files/shaders/objects_fragment.glsl
+++ b/files/shaders/objects_fragment.glsl
@@ -249,4 +249,6 @@ void main()
 #endif

     applyShadowDebugOverlay();
+
+       gl_FragData[0].xyz = pow(gl_FragData[0].xyz, vec3(1.0/@gamma));
 }
diff --git a/files/shaders/terrain_fragment.glsl b/files/shaders/terrain_fragment.glsl
index 1e72cf582..654f2a8b4 100644
--- a/files/shaders/terrain_fragment.glsl
+++ b/files/shaders/terrain_fragment.glsl
@@ -126,4 +126,6 @@ void main()
 #endif

     applyShadowDebugOverlay();
+
+       gl_FragData[0].xyz = pow(gl_FragData[0].xyz, vec3(1.0/@gamma));
 }
